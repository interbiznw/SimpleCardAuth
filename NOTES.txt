# Simple PKI Physical Access Control #

WARNING: The following notes are largely stream-of-consciousness, intended
to just make sense to me. You've been warned!

LDAP-based physical access control requires a sort of "cryptographic
group". Normal LDAP user groups have no cryptographic assurances that
the given users are actually authorized to be in that group aside from
whatever security measures are already in place to ensure that the
directory is not tampered with by unauthorized persons.

Each group would have it's own private key (and presumably a
certificate for that key). Provable group membership can be
accomplished with by signing "access attestations". These attestations
specify:

 *  The DN of the user(or subgroup) in the group
 *  The start-date that membership is granted
 *  the expiration date after which membership has ended.
 *  Additional access rules, like:
     *  "Only valid every other thursday starting on the 5th of feb,
        2015\."
     *  "Only valid between the hours of 9am and 5pm"

Multiple such attestations can be added, allowing for exceptions. For
example, if the cleaning service calls up and says that they can't
make it on wednesday but can make it on thursday, you can add another
access attestation good only for that day(and update the previous
attestation to start the wednesday after)

Explicit revocations of attestations are handled by a separate
mechanism.

Individual access control points are each configured with

 *  a list of acceptable certificate authorities
 *  One or more certificates for the given access zone
 *  A server (LDAP?) for looking up attestations and
    revocations.

Revocations are exceptions. A revocation is necessary whenever the
access capabilities of an attestation are reduced. If you are
extending the expiration date of an attestation, then a revocation is
not necessary. If you want to deny access for a particular person to a
zone for the next week, then you will need to revoke the current
attestation and issue a new attestation with a start date of a week
from now. Revocations must be kept for as long as the attestation it
revokes would otherwise be valid. For example, when the original
attestation expires, the revocation may be discarded. This is to
prevent previously revoked attestations from being reintroduced.

Access points may have more than one zone certificate. For example,
there may be a backyard zone, an indoor zone, and a secure-closet
zone. The indoor access point would have both the indoor certificate
and the secure-closet certificate, because access to the secure closet
implies indoor access. The secure-closet access point would have only
the secure closet zone.

Attestations may indicate the number of factors required of the
authentication method. For example, access may require just the
credential or require the credential and a pin number.

Credentials may be PKI-based secure-elements or HOTP/TOTP values. HOTP
values may be printed out and used access.

The flow looks like this:

1.  User presents credential
2.  Credential is verified -> DN of credential is obtained. If the
    credential is invalid (expired, bad signature, unknown CA), DENY
    ACCESS.
3.  If DN is not already in `cn=users,cd=example,cd=com`, perform an
    LDAP lookup of the credential DN to see if there is an associated
    user DN. If so, assume that DN. If not, DENY ACCESS.
4.  Check local access attestation cache for an attestation cert. If
    there isn't one, do an LDAP query to see if there are any. If not,
    DENY ACCESS. Add attestations to a access consideration list.
5.  Verify all attestations (signature, expiration, start date,
    hours-of-access, etc.). Remove attestations from consideration
    that are not valid.
6.  Check for attestation revocations. Remove any attestations from
    consideration AND from the cache that are revoked. Do a quick LDAP
    lookup for any pending revocations.
7.  If there is at least one valid attestation in the consideration
    list, GRANT ACCESS. Otherwise, DENY ACCESS.

Relevant RFCs:

 *  RFC1272: X.500 and Domains
 *  RFC2253: LDAP UTF-8 String Representation of Distinguished Names

## Attestations ##

An attestation is a JSON dictionary (in [canonical
format](https://github.com/mirkokiefer/canonical-json)) with an
appended raw signature.

The values in the dictionary are:

 *  "type": [REQUIRED] Set to the string "attestation"
 *  "version": [REQUIRED] Set to the string "1"
 *  "userDN": [REQUIRED] the DN of the entity, in LDAP (RFC2253)
    format.
 *  "zoneDN" : [REQUIRED] The DN of the zone that access is being
    granted to. The key which made the signature for the attestation
    must have a certificate for this zone.
 *  "startDate": [REQUIRED] The effective start date, in ISO 8601
    format.
 *  "endDate": [REQUIRED] The effective end date, in ISO 8601 format.
 *  "issueDate": The date that the attestation was issued, in ISO 8601
    format.
 *  "???": Some sort of TBD data describing hourly access attributes.

Attestations are identified by the SHA-256 hash of the JSON part only.

## Revocations ##

Much like an attestation, a revocation is a JSON dictionary (in
[canonical format](https://github.com/mirkokiefer/canonical-json))
with an appended raw signature.

The values in the dictionary are:

 *  "type": [REQUIRED] Set to the string "revocation"
 *  "version": [REQUIRED] Set to the string "1"
 *  "hash": [REQUIRED] The SHA-256 hash of the JSON-part of the
    attestation (does not include signature!)
 *  "zoneDN" : [REQUIRED] This must be set to the same value of the
    associated field in the attestation.
 *  "issueDate": The date that the revocation was issued, in ISO 8601
    format.

Attestations are identified by the SHA-256 hash of the JSON part only.

## More notes ##

JSON can be parsed in shell scripts using:
http://stedolan.github.io/jq/

## RPI Installation ##

sudo apt-get install libusb-dev libusb++-0.1-4c2
sudo apt-get install libccid

sudo apt-get install pcscd

sudo apt-get install libpcsclite1
sudo apt-get install libpcsclite-dev
sudo apt-get install pcsc-tools
sudo apt-get install libpcsc-perl

sudo modprobe -r pn533
sudo modprobe -r nfc

sudo apt-get install libssl-dev
sudo apt-get install libreadline-dev

sudo apt-get install coolkey pcscd pcsc-tools pkg-config libpam-pkcs11 opensc libengine-pkcs11-openssl


